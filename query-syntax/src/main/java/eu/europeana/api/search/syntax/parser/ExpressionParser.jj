options {
    IGNORE_CASE = false;
    STATIC = false;
}

PARSER_BEGIN(SearchExpressionParser)

package eu.europeana.api.search.syntax.parser;

import eu.europeana.api.search.syntax.converter.*;
import eu.europeana.api.search.syntax.exception.QuerySyntaxException;
import eu.europeana.api.search.syntax.field.*;
import eu.europeana.api.search.syntax.function.*;
import eu.europeana.api.search.syntax.model.*;
import java.util.List;
import java.util.ArrayList;

public class SearchExpressionParser{}

PARSER_END(SearchExpressionParser)

<DEFAULT> SKIP:  { " "|"\t" | "\n" | "\r" }
<S1>SKIP: {"\t" | "\n" | "\r"}
<S1> TOKEN:{< UNQUOTED_ANY_CHARS:   (~["(",")","\"","\'"] )* > }

TOKEN: {
 <AND: "AND">
|<OR: "OR">
|<NOT: "NOT">
|<LPAR :"(">
|<RPAR :")">
|<COMMA: ",">
|<COLON: ":">
|<D_QUOTES_START: "\""  > :S1
|<S_QUOTES_START: "\'"> :S1
}

<S1> TOKEN : {< D_QUOTES_END: "\""> : DEFAULT }
<S1> TOKEN : {< S_QUOTES_END: "\'"> : DEFAULT }

TOKEN: { <LETTERS: ["a"-"z","A"-"Z","0"-"9","-","*",".","_"] (["a"-"z","A"-"Z","0"-"9","-",".","_"])*> }

SyntaxExpression parse():{
 SyntaxExpression top;}
{
 top= TopExpression() <EOF> {return top;}
}

TopLevelExpression TopExpression():{
  TopLevelExpression top=null;
  TopLevelExpression binaryExpression=null;
  TopLevelExpression negationExpression=null;
  }
{
  (["("  top=TopExpression() ")" |
   <NOT> top=TopExpression(){if(top!=null){top = new NotExpression(top);}}|
         top=IndividualExpressions()
   ]
   binaryExpression=BinaryExpression(top){ if(binaryExpression != null ){top=binaryExpression;}
    }) {return top; }
}

BinaryArgumentExpression BinaryExpression(TopLevelExpression left):{
 TopLevelExpression right =null;
 }{
(<OR> right=TopExpression()){return new OrExpression(left,right);} | (<AND> right=TopExpression(){return new AndExpression(left,right);}) |{}{return null;}
}

TopLevelExpression IndividualExpressions():{
  TopLevelExpression exp;
 } {
    ( LOOKAHEAD(2)exp=FunctionExpression()
    |  LOOKAHEAD(2)exp=FieldQueryExpression()
    |  LOOKAHEAD(2)exp=ValueExpression()
    )
    {return exp;}

}

FunctionExpression FunctionExpression():{
  String functionName="";
  List<ArgumentExpression> paramList = new ArrayList<>();
  ArgumentExpression argExpr=null;
  }{
  (functionName=FunctionName()<LPAR>
    (argExpr=ArgumentExpressionProduction(){paramList.add(argExpr);}
    (<COMMA> argExpr=ArgumentExpressionProduction(){paramList.add(argExpr);})*)
   <RPAR>)


{return new FunctionExpression(FunctionRegistry.INSTANCE.getFunction(functionName),paramList);}
}
String FunctionName():{ Token t;}{
t=<LETTERS> {return t.image;}
}

ArgumentExpression ArgumentExpressionProduction():{
 ArgumentExpression argExpr=null;
 }{
(LOOKAHEAD(2)argExpr=FunctionExpression()|argExpr=ValueExpression() | {} )
 {return argExpr;}
}

FieldQueryExpression FieldQueryExpression():{
  String fieldName="";
  FieldArgumentExpression fieldArgExpr=null;
  }{
(fieldName=FieldName() <COLON> fieldArgExpr=FieldValueExpression())
{
FieldDeclaration field = FieldRegistry.INSTANCE.getField(fieldName);
if(field==null){
  throw new QuerySyntaxException("No matching field found in registry for field "+fieldName);
}
return new FieldQueryExpression(field,fieldArgExpr);}
}

String FieldName():{
  Token t;
  }{
  t=<LETTERS> {return t.image;}
  }

FieldArgumentExpression FieldValueExpression():{ ValueExpression val ;}{
 val = ValueExpression()  {return val;}
}

ValueExpression ValueExpression():{Token t=null;}{
 (<D_QUOTES_START> (t=<UNQUOTED_ANY_CHARS> |{})<D_QUOTES_END> ) { return new ValueExpression("\""+ t.image +"\"");}
 |  (<S_QUOTES_START> (t=<UNQUOTED_ANY_CHARS>|{} )<S_QUOTES_END>) { return new ValueExpression("\'"+ t.image +"\'");}
 |  (t=<LETTERS>) { return new ValueExpression(t.image); }


}











