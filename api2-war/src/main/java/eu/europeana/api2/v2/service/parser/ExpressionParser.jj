options {
    IGNORE_CASE = false;
    STATIC = false;
}

PARSER_BEGIN(ExpressionParser)


public class ExpressionParser
{
  public static void main(String[] args) {
          try {
                ExpressionParser parser = new ExpressionParser(new java.io.StringReader(args[0]));
                parser.parse();
                System.out.println("### Syntax check passed ####");

            } catch (Throwable e) {
                      // Catching Throwable is ugly but JavaCC throws Error objects!
                      System.out.println("Syntax check failed for query: " + e.getMessage());
                      e.printStackTrace() ;
            }
  }



}

PARSER_END(ExpressionParser)

SKIP:  {" "|  "\t" | "\n" | "\r" }

TOKEN: {
<FUN_NAME: "date" | "dateIntersects" | "dateContains" | "dateWithin" | "interval" >
//|<REGEX_FOR_FIELDEXPRESSION : (["a"-"z","A"-"Z","0"-"9",".","_","-","*","\""])* >
}


TOKEN: {

//<SIMPLESTRING: (["a"-"z"])+ > |
//<NUM: (["0"-"9"])+> |

<AND: "AND">|
<OR: "OR">|
<NOT: "NOT">|

<LPAR :"("> |
<RPAR :")"> |

//<DATESTRING:  (<YEAR>"-"<SHORTMONTH>"-"<SHORTDAY>) | (<YEAR>"-"<SHORTMONTH>) |(<YEAR>) >|
//<YEAR: ["0"-"9"] ["0"-"9"] ["0"-"9"] ["0"-"9"]>| <SHORTMONTH: ["0"]["1"-"9"]| ["1"] ["0"-"2"]>|
//<SHORTDAY: ["0"]["1"-"9"]| ["1"] ["0"-"9"] | ["2"] ["0"-"9"] | ["3"] ["0"-"1"]>|
//<PARAM_VAL: "dcterms_created" >|

<VALUE: (["a"-"z","0"-"9"])+  >|
<FIELD_NAME       :  (["A"-"Z"])+ >

}

void parse():{}
{
  TopExpression()  <EOF>
}

void TopExpression():{}
{
    //'(' TOP_EXPRESSION ')' | 'NOT' TOP_EXPRESSION | [ FUNCTION_EXPRESSION | FIELD_QUERY_EXPRESSION | VALUE_EXPRESSION ] BINARY_EXPRESSION
    ["(" TopExpression() ")" | <NOT> TopExpression()|  IndividualExpressions()]  BinaryExpression()
    }

   // "(" TopExpression() ")" | <NOT> TopExpression()| IndividualExpressions()}

void BinaryExpression():{}{
//'AND' TOP_EXPRESSION | 'OR' TOP_EXPRESSION
(<OR> TopExpression() )| (<AND> TopExpression()) |{}

}

void IndividualExpressions():{} {
    FunctionExpression() | FieldQueryExpression() | ValueExpression()
}

void SetExpression():{}{

//'NOT' TOP_EXPRESSION | TOP_EXPRESSION BINARY_EXPRESSION
    TopExpression()
}




void FunctionExpression():{}{
//FUNCTION_NAME '(' ARGUMENTS ')'

FunctionName()<LPAR>Arguments()<RPAR>
}

void FunctionName():{}{
<FUN_NAME>
}

void Arguments():{}{
//ARGUMENT_EXPRESSION | ARGUMENT_EXPRESSION ',' ARGUMENTS
//ArgumentExpression() | ArgumentExpression() "," Arguments()
ArgumentExpression()("," ArgumentExpression())*
}

void ArgumentExpression():{}{
// | VALUE_EXPRESSION | FUNCTION_EXPRESSION

ValueExpression() | FunctionExpression()| {}
}

void FieldQueryExpression():{}{
//FIELD_NAME ':' FIELD_VALUE_EXPRESSION
FieldName() ":" FieldValueExpression()

}

void FieldName():{}{ <FIELD_NAME> }

void FieldValueExpression():{}{
ValueExpression() //|SetExpression()

}

void ValueExpression():{}{
//'"' VALUE '"' |  '\'' VALUE '\'' |  VALUE

//"\"" <VALUE> "\"" |  "\'" <VALUE>|<DATESTRING> "\'" |  <VALUE>
<VALUE>
}











/*

void TopLevelFunctionExpression() : {}
{
  (<LPAR>)*   FunctionExpression()  (<RPAR>)*
  ([<AND>|<OR>]
  (<LPAR>)*   FunctionExpression()   (<RPAR>)* )
}


void FunctionExpression() :{}
{
//     (<LPAR>)*   Function() (<RPAR>)*
//     ([<AND>|<OR>]
//     (<LPAR>)*    Function()  (<RPAR>)* )

(<NOT>)* Function()

}

void FunctionClause():{}
{
 (<LPAR>)* (<NOT>)* Function() (<RPAR>)*
}

void FieldExpression():{}
{
  <REGEX_FOR_FIELDEXPRESSION> ":" <REGEX_FOR_FIELDEXPRESSION>
}

FunctionQuery Function():{
 FunctionQuery funQuery = new FunctionQuery();
 List<FunctionParam> paramlist;

 Token functionName;
 }
{

  //<FUN_NAME> "(" ParamList() ")"
 (functionName=<FUN_NAME>{funQuery.setFunctionName(functionName.image);}<LPAR>paramlist=ParamList(funQuery){funQuery.setParamlist(paramlist);}<RPAR>)

   {
      return funQuery;
   }
}

List<FunctionParam> ParamList(FunctionQuery funQuery):{


List<FunctionParam> paramList = new ArrayList<>();
}
{
   (Param(paramList){ funQuery.setParamlist(paramList);}
   (","  Param(paramList) {funQuery.setParamlist(paramList);} )* ) {return paramList; }

}

void Param(List<FunctionParam> paramList):{
 Token paramvalue;
 FunctionParam param = new FunctionParam();
 FunctionQuery funQuery=null;

 String name=null;
 }
{

//  [LOOKAHEAD(2)paramvalue=<SIMPLESTRING>{param.setParamValue(paramvalue.image);if(paramList!=null ) paramList.add(param);}]|
//  [paramvalue=<NUM>{param.setParamValue(paramvalue.image);if(paramList!=null ) paramList.add(param);}]|
//  [paramvalue=<DATESTRING>{param.setParamValue(paramvalue.image);if(paramList!=null ) paramList.add(param);}]|
//  [Function()]

 (
 [LOOKAHEAD(2)paramvalue=<SIMPLESTRING>{name=paramvalue.image;}]
 [LOOKAHEAD(2)paramvalue=<NUM>{name=paramvalue.image;}]
 [paramvalue=<DATESTRING>{name=paramvalue.image;}]
) {param.setParamValue(name);if(paramList!=null ) paramList.add(param);}

 [funQuery=Function()] {param.setFunction(funQuery);}


  //{ return param; }
}

*/
