options {
    IGNORE_CASE = false;
}

PARSER_BEGIN(SearchExpressionParser)

package eu.europeana.api2.v2.service.parser;

import eu.europeana.api2.v2.service.parser.datamodel.FunctionParam;
import eu.europeana.api2.v2.service.parser.datamodel.FunctionQuery;
import java.util.ArrayList;
import java.util.List;

public class SearchExpressionParser
{
//  public static void main(String[] args) {
//          try {
//                SearchExpressionParser parser = new SearchExpressionParser(new java.io.StringReader(args[0]));
//                parser.parse();
//                System.out.println("### Syntax check passed ####");
//
//            } catch (Throwable e) {
//                      // Catching Throwable is ugly but JavaCC throws Error objects!
//
//                      System.out.println("Syntax check failed for query: " + e.getMessage());
//
//                       e.printStackTrace() ;
//            }
//  }



}

PARSER_END(SearchExpressionParser)

SKIP:  { " " | "\t" | "\n" | "\r" }

TOKEN: {
<FUN_NAME: "date" | "dateIntersects" | "dateContains" | "dateWithin" | "interval" >
}


TOKEN: {

<SIMPLESTRING: (["a"-"z"])+ > |
<NUM: (["0"-"9"])+> |

<AND: "AND">|
<OR: "OR">|
<NOT: "NOT">|

<LPAR :"("> |
<RPAR :")"> |

<DATESTRING:  (<YEAR>"-"<SHORTMONTH>"-"<SHORTDAY>) | (<YEAR>"-"<SHORTMONTH>) |(<YEAR>) >|
<YEAR: ["0"-"9"] ["0"-"9"] ["0"-"9"] ["0"-"9"]>| <SHORTMONTH: ["0"]["1"-"9"]| ["1"] ["0"-"2"]>|
<SHORTDAY: ["0"]["1"-"9"]| ["1"] ["0"-"9"] | ["2"] ["0"-"9"] | ["3"] ["0"-"1"]>|

//<FUN_NAME: "date" | "dateIntersects" | "dateContains" | "dateWithin" | "interval" >|
<PARAM_VAL: "dcterms_created" >

}

void parse():{}
{
  Term() <EOF>
}

void Term():{}
{
  LOOKAHEAD(2)  FunctionExpression()  | FieldExpression()
  {
     //This is syntax of full nqf parameter
  }
}

void FunctionExpression() :
 {

 }
{

(<LPAR>)*   (<NOT>)* Function() (<RPAR>)*
([<AND>|<OR>]
(<LPAR>)*   (<NOT>)* Function() (<RPAR>)* )*
}

void FunctionClause():{}
{
 (<LPAR>)* (<NOT>)* Function() (<RPAR>)*
}

void FieldExpression():{}
{
  <SIMPLESTRING> ":" <SIMPLESTRING> |<NUM>
}

FunctionQuery Function():{
 FunctionQuery funQuery = new FunctionQuery();
 List<FunctionParam> paramlist;

 Token functionName,wholefunction;
 }
{

  //<FUN_NAME> "(" ParamList() ")"
 functionName=<FUN_NAME>{funQuery.setFunctionName(functionName.image);}<LPAR>paramlist=ParamList(funQuery){funQuery.setParamlist(paramlist);}<RPAR>

   {
      return funQuery;
   }
}

List<FunctionParam> ParamList(FunctionQuery funQuery):{


List<FunctionParam> paramList = new ArrayList<>();
}
{
   (Param(paramList){ funQuery.setParamlist(paramList);}
   (","  Param(paramList) {funQuery.setParamlist(paramList);} )* ) {return paramList; }

}

void Param(List<FunctionParam> paramList):{
 Token paramvalue;
 FunctionParam param = new FunctionParam();
 FunctionQuery funQuery=null;

 String name=null;
 }
{

//  [LOOKAHEAD(2)paramvalue=<SIMPLESTRING>{param.setParamValue(paramvalue.image);if(paramList!=null ) paramList.add(param);}]|
//  [paramvalue=<NUM>{param.setParamValue(paramvalue.image);if(paramList!=null ) paramList.add(param);}]|
//  [paramvalue=<DATESTRING>{param.setParamValue(paramvalue.image);if(paramList!=null ) paramList.add(param);}]|
//  [Function()]

 (
 [LOOKAHEAD(2)paramvalue=<SIMPLESTRING>{name=paramvalue.image;}]
 [LOOKAHEAD(2)paramvalue=<NUM>{name=paramvalue.image;}]
 [paramvalue=<DATESTRING>{name=paramvalue.image;}]
) {param.setParamValue(name);if(paramList!=null ) paramList.add(param);}

 [funQuery=Function()] {param.setFunction(funQuery);}


  //{ return param; }
}


