<?xml version="1.0" encoding="UTF-8" ?>
<beans 
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="
		http://www.springframework.org/schema/security/oauth2 
		http://www.springframework.org/schema/security/spring-security-oauth2.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
	">

	<security:http pattern="/image*" security="none" />
	<security:http pattern="/suggestions.json" security="none" />
	<security:http pattern="/opensearch.rss" security="none" />
	<security:http pattern="/opensearch.json" security="none" />
	<security:http pattern="/search.*" security="none" />
	<security:http pattern="/record/**" security="none" />

	<!-- Token endpoint -->
	<security:http pattern="/oauth/token"
			create-session="stateless"
			authentication-manager-ref="api2_oauth2_clientAuthenticationManager"
			entry-point-ref="api2_oauth2_authenticationEntryPoint"
			realm="Europeana API2 OAuth">
		<security:intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		<security:anonymous enabled="false" />
		<security:http-basic entry-point-ref="api2_oauth2_authenticationEntryPoint" />
		<security:access-denied-handler ref="api2_oauth2_accessDeniedHandler" />
	</security:http>

	<security:http pattern="/oauth/(users|clients)/.*"
			request-matcher="regex"
			create-session="stateless"
			entry-point-ref="api2_oauth2_authenticationEntryPoint"
			use-expressions="true">
		<security:anonymous enabled="false" />
		<security:intercept-url pattern="/oauth/users/([^/].*?)/tokens/.*"
			access="#oauth2.clientHasRole('ROLE_CLIENT') and (hasRole('ROLE_USER') or #oauth2.isClient()) and #oauth2.hasScope('write')"
			method="DELETE" />
		<security:intercept-url pattern="/oauth/users/.*"
			access="#oauth2.clientHasRole('ROLE_CLIENT') and (hasRole('ROLE_USER') or #oauth2.isClient()) and #oauth2.hasScope('read')"
			method="GET" />
		<security:intercept-url pattern="/oauth/clients/.*"
			access="#oauth2.clientHasRole('ROLE_CLIENT') and #oauth2.isClient() and #oauth2.hasScope('read')"
			method="GET" />
		<security:intercept-url pattern="/**"
			access="denyAll()" />
		<security:custom-filter ref="api2_oauth2_resourceServerFilter" before="PRE_AUTH_FILTER" />
		<security:access-denied-handler ref="api2_oauth2_accessDeniedHandler" />
		<security:expression-handler ref="oauthWebExpressionHandler" />
	</security:http>

	<security:http pattern="/v2/user/**"
			create-session="never"
			entry-point-ref="api2_oauth2_authenticationEntryPoint"
			access-decision-manager-ref="api2_oauth2_accessDecisionManager">
		<security:anonymous enabled="false" />
		<security:intercept-url pattern="/v2/user" access="ROLE_USER,SCOPE_READ" />
		<security:intercept-url pattern="/v2/user/**" access="ROLE_USER,SCOPE_READ" />
		<security:custom-filter ref="api2_oauth2_resourceServerFilter" before="PRE_AUTH_FILTER" />
		<security:access-denied-handler ref="api2_oauth2_accessDeniedHandler" />
		<security:form-login
			login-processing-url="/login.do"
			login-page="/login?form=user" />
		<security:logout logout-success-url="/" logout-url="/logout.do" />
	</security:http>
	
	<security:http pattern="/v2/mydata/**">
		<security:intercept-url pattern="/v2/mydata" access="ROLE_CLIENT" />
		<security:intercept-url pattern="/v2/mydata/**" access="ROLE_CLIENT" />
		<security:anonymous enabled="false" />
		<security:form-login
			login-processing-url="/login.do" login-page="/login?form=myData" />
		<security:logout logout-success-url="/" logout-url="/logout.do" />
	</security:http>

	<security:http pattern="/apikey/**">
		<security:intercept-url pattern="/apikey" access="ROLE_CLIENT" />
		<security:intercept-url pattern="/apikey/**" access="ROLE_CLIENT" />
		<security:anonymous enabled="false" />
		<security:form-login
			login-processing-url="/login.do" login-page="/login?form=myData" />
		<security:logout logout-success-url="/" logout-url="/logout.do" />
	</security:http>

	<security:http disable-url-rewriting="true">
		<security:intercept-url pattern="/oauth/**" access="ROLE_USER" />
		<security:intercept-url pattern="/user/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<security:form-login
			login-processing-url="/login.do"
			login-page="/login?form=user" />
		<security:logout
			logout-success-url="/"
			logout-url="/logout.do" />
		<security:anonymous />
	</security:http>

	<bean id="api2_oauth2_clientCredentialsTokenEndpointFilter"
		class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<property name="authenticationManager" ref="api2_oauth2_clientAuthenticationManager"/>
	</bean>

	<bean id="api2_oauth2_authenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="Europeana API2" />
	</bean>

	<bean id="api2_oauth2_accessDeniedHandler"
		class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	<bean id="api2_oauth2_accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased"
			xmlns="http://www.springframework.org/schema/beans">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<bean class="org.springframework.security.access.vote.RoleVoter" />
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</list>
		</constructor-arg>
	</bean>

	<!-- AUTHENTICATION MANAGER -->

	<security:authentication-manager id="api2_oauth2_clientAuthenticationManager">
		<security:authentication-provider user-service-ref="api2_oauth2_clientDetailsUserService" />
	</security:authentication-manager>
	<!-- ClientDetailsService implementation -->
	<bean id="api2_oauth2_clientDetailsService" class="eu.europeana.api2.web.security.oauth2.OAuth2ClientDetailsService"/>

	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider user-service-ref="api2_userDetailsService">
			<security:password-encoder hash="sha"/>
		</security:authentication-provider>
	</security:authentication-manager>
	<bean id="api2_userDetailsService" class="eu.europeana.api2.web.security.UserDetailsServiceImpl"/>

	<bean id="api2_authenticationFilter"
			class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter" primary="true">
		<property name="authenticationManager" ref="authenticationManager"/>
		<property name="filterProcessesUrl" value="/login?form=user"/>
		<property name="usernameParameter" value="api2key"/>
		<property name="passwordParameter" value="secret"/>
	</bean>

    <bean id = "api2_requestFactory" class = "org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
    <constructor-arg ref="api2_oauth2_clientDetailsService" />
    </bean>
	<!-- TOKEN STORE -->
	<bean id="api2_oauth2_tokenStore" class="eu.europeana.api2.web.security.oauth2.ApiTokenStore" />

	<!--  AuthorizationServerTokenServices implementation (Spring's default implementation) -->
	<bean id="api2_oauth2_tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<property name="tokenStore" ref="api2_oauth2_tokenStore" />
		<property name="supportRefreshToken" value="true" />
		<property name="clientDetailsService" ref="api2_oauth2_clientDetailsService" />
	</bean>

	<bean id="api2_oauth2_clientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<constructor-arg ref="api2_oauth2_clientDetailsService" />
	</bean>

	<bean id="api2_oauth2_userApprovalHandler" class="eu.europeana.api2.web.security.oauth2.ApiUserApprovalHandler">
		<property name="autoApproveClients">
			<set>
				<value>my-less-trusted-autoapprove-client</value>
			</set>
		</property>
		<property name="clientDetailsService" ref="api2_oauth2_clientDetailsService" />
		<property name="tokenStore" ref="api2_oauth2_tokenStore" />
		<property name="requestFactory" ref="api2_requestFactory" />
	</bean>

	<oauth2:expression-handler id="oauthExpressionHandler" />
	<oauth2:web-expression-handler id="oauthWebExpressionHandler" />

	<!-- Configure the OAuth 2.0 Authorization Server mechanism -->
	<oauth2:authorization-server
		client-details-service-ref="api2_oauth2_clientDetailsService"
		token-services-ref="api2_oauth2_tokenServices"
		user-approval-handler-ref="api2_oauth2_userApprovalHandler" >
		<oauth2:authorization-code />
		<oauth2:implicit />
		<oauth2:refresh-token />
		<oauth2:client-credentials />
		<oauth2:password />
	</oauth2:authorization-server>

	<oauth2:resource-server id="api2_oauth2_resourceServerFilter"
		resource-id="Europeana API2"
		token-services-ref="api2_oauth2_tokenServices" />

</beans>